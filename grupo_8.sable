Package calculadora;

Helpers
 digito = ['0' .. '9'];
 caractere_maiusculo = ['A' .. 'Z'];
 caractere_minusculo = ['a' .. 'z'];
 alfabeto = (caractere_minusculo | caractere_maiusculo);
 espaco = ' ';
 tab = '	';
 hifen = '_';
 ponto = '.';
 virgula = ',';
 numero_inteiro = digito+;
 numero_virgula = digito+ virgula digito+;
 numero_cientifico = digito ('e' | 'E') ('-' | '+') digito;
 abre_chaves = '{';
 fecha_chaves = '}';
 rc = 13;
 nl = 10;
 
Tokens
 primitivo = 'Bool' | 'Numero' | 'Texto';
 numero = numero_inteiro | numero_virgula | numero_cientifico;
 verdade = 'verdade';
 falso = 'falso';
 molde = 'molde';
 se = 'se';
 entao = 'entao';
 senao = 'senao';
 passa = 'passa';
 por = 'por';
 ponto_virgula = ';';
 contem = 'contem';
 constante = 'constante';
 funcao = 'funcao';
 objeto = 'objeto';
 fim = 'fim';
 separador = '|';
 dois_pontos = ':';
 ponto_final = '.';
 abre_parenteses = '(';
 fecha_parenteses = ')';
 abre_colchete = '[';
 fecha_colchete = ']';
 abre_aspas = '"';
 multiplicacao = '*';
 soma = '+';
 subtracao = '-';
 divisao = '/';
 modulo = '%';
 igual_igual = '==';
 igual = '=';
 menor_que = '<';
 menor_igual = '<=';
 exclamacao = '!';
 e = 'e';
 ou = 'ou';
 entrada = '>>';
 vazio = (espaco | rc | nl | tab)+;
 comentario_linha = '--' ([0x00 .. 0x09] | [0x0b .. 0x0c] | [0x0e .. 0xff])*;
 id_molde = caractere_maiusculo (caractere_minusculo | hifen | caractere_maiusculo)*;
 id = caractere_minusculo (hifen | caractere_minusculo | caractere_maiusculo)*;
 texto = (caractere_maiusculo | caractere_minusculo)+;
 comentario_bloco = abre_chaves ([0x00 .. 0x7c] | [0x7e .. 0xff])* fecha_chaves;
 string = '"' ([0x00 .. 0x21] | [0x23 .. 0xff])* '"';

Ignored Tokens
 vazio, comentario_linha, comentario_bloco;

 
Productions

 inicio = 
 	{programa} programa;
 
 programa = 
	familia [esquerda]:def_molde [direita]:def_molde*;
 
 familia = 
 	{familia} relacao familia_fecho* ponto_final
 	|{vazio};
 familia_fecho = 
 	ponto_virgula relacao;
 
 def_molde = 
 	molde id_molde contem atributos metodos fim;
 	
 relacao = 
 	molde [esquerdo]:id_molde se passa por [direito]:id_molde;
 	
 atributos = 
 	atributos_fecho*;
 atributos_fecho = 
 	{objeto} dec_obj
 	|{constante} dec_cons;
 
 metodos = 
 	dec_funcao*;
 
 dec_obj = 
 	objeto dois_pontos tipo_molde id ponto_virgula;
 
 dec_cons = 
 	constante dois_pontos tipo_primitivo id ponto_virgula;
 	
 dec_funcao =
 	{func1} entrada? funcao dois_pontos tipo id abre_parenteses parametros fecha_parenteses blloco
 	|{func2} entrada? funcao dois_pontos tipo id abre_parenteses parametros fecha_parenteses ponto_virgula;
 
 tipo_primitivo = 
 	primitivo;
 	
 tipo_molde = 
 	id_molde;
 
 tipo = 
 	{primitivo} tipo_primitivo
 	|{molde} tipo_molde;
 
 parametros = 
 	{parametro} parametro parametro_fecho*
 	|{vazio};
 parametro_fecho = 
 	separador parametro;
 
 parametro = 
 	{id} tipo id
 	|{assinatura} assinatura;

 assinatura = 
 	tipo id abre_parenteses parametros_assinatura fecha_parenteses;
 
 parametros_assinatura = 
 	parametro_assinatura parametros_assinatura_fecho*
 	|{vazio};
 parametros_assinatura_fecho = 
 	separador parametro_assinatura;
 
 parametro_assinatura = 
 	{tipo} tipo
 	|{assinatura} assinatura;
 	
 blloco = 
 	abre_colchete blloco_fecho* exp fecha_colchete;
 blloco_fecho = 
 	{constante} dec_cons
 	|{objeto} dec_obj
 	|{def} definicao;
 
 definicao = 
 	id_ou_attr igual exp ponto_virgula;
 id_ou_attr = 
 	{id} id
 	|{attr} [esquerdo]:id pontoid_fecho+;
 
 pontoid_fecho = 
 	ponto_final id;
 
 exp = 
 	{ou} ou_logico
 	|{instancia} instancia
 	|{chamada} chamada
 	|{ternario} se abre_parenteses [esquerdo]:exp fecha_parenteses entao [centro]:exp senao [direito]: exp
 	|{bloco} blloco;
 
 ou_logico = 
 	{ou} ou_logico ou e_logico
 	|{e} e_logico;
 
 e_logico = 
 	{comparacao} comparacao
 	|{e} e_logico e comparacao;
 
 comparacao = 
 	{relacional} relacional
 	|{comparacao} comparacao igual_igual relacional;
 
 relacional = 
 	{aritmeticos1} aritmeticos1
 	|{menor} relacional menor_que termo
 	|{menor_igual} relacional menor_igual aritmeticos1;
 
 aritmeticos1 = 
 	{aritmeticos2} aritmeticos2
 	|{soma} aritmeticos1 soma aritmeticos2
 	|{subtracao} aritmeticos1 subtracao aritmeticos2;
 
 aritmeticos2 = 
 	{aritmeticos3} aritmeticos3
 	|{multiplicacao} aritmeticos2 multiplicacao aritmeticos3
 	|{divisao} aritmeticos2 divisao aritmeticos3
 	|{modulo} aritmeticos2 modulo aritmeticos3;
 
 aritmeticos3 = 
 	{negacao} exclamacao termo
 	|{termo} termo
 	|{negativo} subtracao termo;
  
 termo =  
 	{numero} numero
 	|{id} id_ou_attr
 	|{string} string
 	|{texto} texto
 	|{verdade} verdade
 	|{falso} falso
 	|{parenteses} abre_parenteses exp fecha_parenteses;
 
 instancia = 
 	id_molde abre_colchete lista_init fecha_colchete;

 lista_init = 
 	{init} init_objeto l_init_fecho*
 	|{vazio};

 l_init_fecho = 
 	separador init_objeto;

 init_objeto = 
 	objeto ponto_final id pontoid_fecho* igual exp;
 
 chamada = 
 	id pontoid_fecho* abre_parenteses lista_exp fecha_parenteses;
 lista_exp = 
 	{exp} exp l_exp_fecho*
 	|{vazio};
 l_exp_fecho = 
 	separador exp;
 