/* This file was generated by SableCC (http://www.sablecc.org/). */

package bemtevi.parser;

import bemtevi.lexer.*;
import bemtevi.node.*;
import bemtevi.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PInicio node1 = (PInicio) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AExpInicio */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AFamiliaInicio */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AFuncaoInicio */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AOuExp */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AChamadaExp */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce ABlocoExp */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AInstanciaExp */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list);
            }
            break;
            case 7: /* reduce ATernarioExp */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list);
            }
            break;
            case 8: /* reduce AOuOuLogico */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list);
            }
            break;
            case 9: /* reduce AEOuLogico */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list);
            }
            break;
            case 10: /* reduce AComparacaoELogico */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce AEELogico */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list);
            }
            break;
            case 12: /* reduce ARelacionalComparacao */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AComparacaoComparacao */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list);
            }
            break;
            case 14: /* reduce AAritmeticos1Relacional */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce AMenorRelacional */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce AMenorIgualRelacional */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce AAritmeticos2Aritmeticos1 */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce ASomaAritmeticos1 */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce ASubtracaoAritmeticos1 */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list);
            }
            break;
            case 20: /* reduce AAritmeticos3Aritmeticos2 */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce AMultiplicacaoAritmeticos2 */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list);
            }
            break;
            case 22: /* reduce ADivisaoAritmeticos2 */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list);
            }
            break;
            case 23: /* reduce AModuloAritmeticos2 */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list);
            }
            break;
            case 24: /* reduce ATermoAritmeticos3 */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce ANegacaoAritmeticos3 */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce ANegativoAritmeticos3 */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce ANumeroTermo */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list);
            }
            break;
            case 28: /* reduce AStringTermo */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list);
            }
            break;
            case 29: /* reduce AIdTermo */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list);
            }
            break;
            case 30: /* reduce ATextoTermo */
            {
                ArrayList<Object> list = new30();
                push(goTo(9), list);
            }
            break;
            case 31: /* reduce AVerdadeTermo */
            {
                ArrayList<Object> list = new31();
                push(goTo(9), list);
            }
            break;
            case 32: /* reduce AFalsoTermo */
            {
                ArrayList<Object> list = new32();
                push(goTo(9), list);
            }
            break;
            case 33: /* reduce AParentesesTermo */
            {
                ArrayList<Object> list = new33();
                push(goTo(9), list);
            }
            break;
            case 34: /* reduce AAblloco1Blloco */
            {
                ArrayList<Object> list = new34();
                push(goTo(10), list);
            }
            break;
            case 35: /* reduce AAblloco2Blloco */
            {
                ArrayList<Object> list = new35();
                push(goTo(10), list);
            }
            break;
            case 36: /* reduce AConstanteBllocoFecho */
            {
                ArrayList<Object> list = new36();
                push(goTo(11), list);
            }
            break;
            case 37: /* reduce AObjetoBllocoFecho */
            {
                ArrayList<Object> list = new37();
                push(goTo(11), list);
            }
            break;
            case 38: /* reduce ADefinicaoBllocoFecho */
            {
                ArrayList<Object> list = new38();
                push(goTo(11), list);
            }
            break;
            case 39: /* reduce ADefinicao */
            {
                ArrayList<Object> list = new39();
                push(goTo(12), list);
            }
            break;
            case 40: /* reduce AIdIdOuAttr */
            {
                ArrayList<Object> list = new40();
                push(goTo(13), list);
            }
            break;
            case 41: /* reduce AAttrIdOuAttr */
            {
                ArrayList<Object> list = new41();
                push(goTo(13), list);
            }
            break;
            case 42: /* reduce AIdFecho */
            {
                ArrayList<Object> list = new42();
                push(goTo(14), list);
            }
            break;
            case 43: /* reduce APrimitivoTipo */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list);
            }
            break;
            case 44: /* reduce AMoldeTipo */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list);
            }
            break;
            case 45: /* reduce ATipoPrimitivo */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce ATipoMolde */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list);
            }
            break;
            case 47: /* reduce ADecObj */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list);
            }
            break;
            case 48: /* reduce ADecCons */
            {
                ArrayList<Object> list = new48();
                push(goTo(19), list);
            }
            break;
            case 49: /* reduce AAchamada1Chamada */
            {
                ArrayList<Object> list = new49();
                push(goTo(20), list);
            }
            break;
            case 50: /* reduce AAchamada2Chamada */
            {
                ArrayList<Object> list = new50();
                push(goTo(20), list);
            }
            break;
            case 51: /* reduce AAexplistaexp1ListaExp */
            {
                ArrayList<Object> list = new51();
                push(goTo(21), list);
            }
            break;
            case 52: /* reduce AAexplistaexp2ListaExp */
            {
                ArrayList<Object> list = new52();
                push(goTo(21), list);
            }
            break;
            case 53: /* reduce AVazioListaExp */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list);
            }
            break;
            case 54: /* reduce ALExpFecho */
            {
                ArrayList<Object> list = new54();
                push(goTo(22), list);
            }
            break;
            case 55: /* reduce AInstancia */
            {
                ArrayList<Object> list = new55();
                push(goTo(23), list);
            }
            break;
            case 56: /* reduce AAinitlistainit1ListaInit */
            {
                ArrayList<Object> list = new56();
                push(goTo(24), list);
            }
            break;
            case 57: /* reduce AAinitlistainit2ListaInit */
            {
                ArrayList<Object> list = new57();
                push(goTo(24), list);
            }
            break;
            case 58: /* reduce AVazioListaInit */
            {
                ArrayList<Object> list = new58();
                push(goTo(24), list);
            }
            break;
            case 59: /* reduce ALInitFecho */
            {
                ArrayList<Object> list = new59();
                push(goTo(25), list);
            }
            break;
            case 60: /* reduce AAinitobjeto1InitObjeto */
            {
                ArrayList<Object> list = new60();
                push(goTo(26), list);
            }
            break;
            case 61: /* reduce AAinitobjeto2InitObjeto */
            {
                ArrayList<Object> list = new61();
                push(goTo(26), list);
            }
            break;
            case 62: /* reduce AAfamiliafamilia1Familia */
            {
                ArrayList<Object> list = new62();
                push(goTo(27), list);
            }
            break;
            case 63: /* reduce AAfamiliafamilia2Familia */
            {
                ArrayList<Object> list = new63();
                push(goTo(27), list);
            }
            break;
            case 64: /* reduce AVazioFamilia */
            {
                ArrayList<Object> list = new64();
                push(goTo(27), list);
            }
            break;
            case 65: /* reduce AFamiliaFecho */
            {
                ArrayList<Object> list = new65();
                push(goTo(28), list);
            }
            break;
            case 66: /* reduce ARelacao */
            {
                ArrayList<Object> list = new66();
                push(goTo(29), list);
            }
            break;
            case 67: /* reduce AAfunc1decfuncao1DecFuncao */
            {
                ArrayList<Object> list = new67();
                push(goTo(30), list);
            }
            break;
            case 68: /* reduce AAfunc1decfuncao2DecFuncao */
            {
                ArrayList<Object> list = new68();
                push(goTo(30), list);
            }
            break;
            case 69: /* reduce AAfunc2decfuncao1DecFuncao */
            {
                ArrayList<Object> list = new69();
                push(goTo(30), list);
            }
            break;
            case 70: /* reduce AAfunc2decfuncao2DecFuncao */
            {
                ArrayList<Object> list = new70();
                push(goTo(30), list);
            }
            break;
            case 71: /* reduce AAparametroparametros1Parametros */
            {
                ArrayList<Object> list = new71();
                push(goTo(31), list);
            }
            break;
            case 72: /* reduce AAparametroparametros2Parametros */
            {
                ArrayList<Object> list = new72();
                push(goTo(31), list);
            }
            break;
            case 73: /* reduce AVazioParametros */
            {
                ArrayList<Object> list = new73();
                push(goTo(31), list);
            }
            break;
            case 74: /* reduce AParametroFecho */
            {
                ArrayList<Object> list = new74();
                push(goTo(32), list);
            }
            break;
            case 75: /* reduce AIdParametro */
            {
                ArrayList<Object> list = new75();
                push(goTo(33), list);
            }
            break;
            case 76: /* reduce AAssinaturaParametro */
            {
                ArrayList<Object> list = new76();
                push(goTo(33), list);
            }
            break;
            case 77: /* reduce AAssinatura */
            {
                ArrayList<Object> list = new77();
                push(goTo(34), list);
            }
            break;
            case 78: /* reduce AAparametrosassinatura1ParametrosAssinatura */
            {
                ArrayList<Object> list = new78();
                push(goTo(35), list);
            }
            break;
            case 79: /* reduce AAparametrosassinatura2ParametrosAssinatura */
            {
                ArrayList<Object> list = new79();
                push(goTo(35), list);
            }
            break;
            case 80: /* reduce AVazioParametrosAssinatura */
            {
                ArrayList<Object> list = new80();
                push(goTo(35), list);
            }
            break;
            case 81: /* reduce AParametrosAssinaturaFecho */
            {
                ArrayList<Object> list = new81();
                push(goTo(36), list);
            }
            break;
            case 82: /* reduce ATipoParametroAssinatura */
            {
                ArrayList<Object> list = new82();
                push(goTo(37), list);
            }
            break;
            case 83: /* reduce AAssinaturaParametroAssinatura */
            {
                ArrayList<Object> list = new83();
                push(goTo(37), list);
            }
            break;
            case 84: /* reduce ATerminal$BllocoFecho */
            {
                ArrayList<Object> list = new84();
                push(goTo(38), list);
            }
            break;
            case 85: /* reduce ANonTerminal$BllocoFecho */
            {
                ArrayList<Object> list = new85();
                push(goTo(38), list);
            }
            break;
            case 86: /* reduce ATerminal$IdFecho */
            {
                ArrayList<Object> list = new86();
                push(goTo(39), list);
            }
            break;
            case 87: /* reduce ANonTerminal$IdFecho */
            {
                ArrayList<Object> list = new87();
                push(goTo(39), list);
            }
            break;
            case 88: /* reduce ATerminal$LExpFecho */
            {
                ArrayList<Object> list = new88();
                push(goTo(40), list);
            }
            break;
            case 89: /* reduce ANonTerminal$LExpFecho */
            {
                ArrayList<Object> list = new89();
                push(goTo(40), list);
            }
            break;
            case 90: /* reduce ATerminal$LInitFecho */
            {
                ArrayList<Object> list = new90();
                push(goTo(41), list);
            }
            break;
            case 91: /* reduce ANonTerminal$LInitFecho */
            {
                ArrayList<Object> list = new91();
                push(goTo(41), list);
            }
            break;
            case 92: /* reduce ATerminal$FamiliaFecho */
            {
                ArrayList<Object> list = new92();
                push(goTo(42), list);
            }
            break;
            case 93: /* reduce ANonTerminal$FamiliaFecho */
            {
                ArrayList<Object> list = new93();
                push(goTo(42), list);
            }
            break;
            case 94: /* reduce ATerminal$ParametroFecho */
            {
                ArrayList<Object> list = new94();
                push(goTo(43), list);
            }
            break;
            case 95: /* reduce ANonTerminal$ParametroFecho */
            {
                ArrayList<Object> list = new95();
                push(goTo(43), list);
            }
            break;
            case 96: /* reduce ATerminal$ParametrosAssinaturaFecho */
            {
                ArrayList<Object> list = new96();
                push(goTo(44), list);
            }
            break;
            case 97: /* reduce ANonTerminal$ParametrosAssinaturaFecho */
            {
                ArrayList<Object> list = new97();
                push(goTo(44), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AExpInicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInicio pinicioNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pinicioNode1 = new AExpInicio(pexpNode2);
        }
	nodeList.add(pinicioNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AFamiliaInicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInicio pinicioNode1;
        {
            // Block
        PFamilia pfamiliaNode2;
        pfamiliaNode2 = (PFamilia)nodeArrayList1.get(0);

        pinicioNode1 = new AFamiliaInicio(pfamiliaNode2);
        }
	nodeList.add(pinicioNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AFuncaoInicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInicio pinicioNode1;
        {
            // Block
        PDecFuncao pdecfuncaoNode2;
        pdecfuncaoNode2 = (PDecFuncao)nodeArrayList1.get(0);

        pinicioNode1 = new AFuncaoInicio(pdecfuncaoNode2);
        }
	nodeList.add(pinicioNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AOuExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AChamadaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ABlocoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AInstanciaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ATernarioExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList6.get(0);
        pexpNode4 = (PExp)nodeArrayList8.get(0);

        pexpNode1 = new ATernarioExp(pexpNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AOuOuLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOuExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AEOuLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AComparacaoELogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AEELogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ARelacionalComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AComparacaoComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AComparacaoExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAritmeticos1Relacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AMenorRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenorQueExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AMenorIgualRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenorIgualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAritmeticos2Aritmeticos1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ASomaAritmeticos1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASomaExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASubtracaoAritmeticos1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASubtracaoExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAritmeticos3Aritmeticos2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AMultiplicacaoAritmeticos2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultiplicacaoExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ADivisaoAritmeticos2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivisaoExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AModuloAritmeticos2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModuloExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ATermoAritmeticos3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ANegacaoAritmeticos3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegacaoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ANegativoAritmeticos3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegativoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANumeroTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pexpNode1 = new ANumeroExp(tnumeroNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AStringTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pexpNode1 = new AStringExp(tstringNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIdTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AIdExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ATextoTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TTexto ttextoNode2;
        ttextoNode2 = (TTexto)nodeArrayList1.get(0);

        pexpNode1 = new ATextoExp(ttextoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AVerdadeTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TVerdade tverdadeNode2;
        tverdadeNode2 = (TVerdade)nodeArrayList1.get(0);

        pexpNode1 = new AVerdadeExp(tverdadeNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AFalsoTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFalso tfalsoNode2;
        tfalsoNode2 = (TFalso)nodeArrayList1.get(0);

        pexpNode1 = new AFalsoExp(tfalsoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AParentesesTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAblloco1Blloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExp pexpNode3;
        {
            // Block
        }
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ABlocoExp(listNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAblloco2Blloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ABlocoExp(listNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AConstanteBllocoFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBllocoFecho pbllocofechoNode1;
        pbllocofechoNode1 = (PBllocoFecho)nodeArrayList1.get(0);
	nodeList.add(pbllocofechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AObjetoBllocoFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBllocoFecho pbllocofechoNode1;
        pbllocofechoNode1 = (PBllocoFecho)nodeArrayList1.get(0);
	nodeList.add(pbllocofechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ADefinicaoBllocoFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBllocoFecho pbllocofechoNode1;
        pbllocofechoNode1 = (PBllocoFecho)nodeArrayList1.get(0);
	nodeList.add(pbllocofechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ADefinicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBllocoFecho pbllocofechoNode1;
        {
            // Block
        PIdOuAttr pidouattrNode2;
        PExp pexpNode3;
        pidouattrNode2 = (PIdOuAttr)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pbllocofechoNode1 = new ADefinicaoBllocoFecho(pidouattrNode2, pexpNode3);
        }
	nodeList.add(pbllocofechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIdIdOuAttr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdOuAttr pidouattrNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidouattrNode1 = new AIdIdOuAttr(tidNode2);
        }
	nodeList.add(pidouattrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAttrIdOuAttr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdOuAttr pidouattrNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pidouattrNode1 = new AAttrIdOuAttr(tidNode2, listNode4);
        }
	nodeList.add(pidouattrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AIdFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdFecho pidfechoNode1;
        {
            // Block
        TPontoFinal tpontofinalNode2;
        TId tidNode3;
        tpontofinalNode2 = (TPontoFinal)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pidfechoNode1 = new AIdFecho(tpontofinalNode2, tidNode3);
        }
	nodeList.add(pidfechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce APrimitivoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TPrimitivo tprimitivoNode2;
        tprimitivoNode2 = (TPrimitivo)nodeArrayList1.get(0);

        ptipoNode1 = new APrimitivoTipo(tprimitivoNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMoldeTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TIdMolde tidmoldeNode2;
        tidmoldeNode2 = (TIdMolde)nodeArrayList1.get(0);

        ptipoNode1 = new AMoldeTipo(tidmoldeNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ATipoPrimitivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoPrimitivo ptipoprimitivoNode1;
        {
            // Block
        TPrimitivo tprimitivoNode2;
        tprimitivoNode2 = (TPrimitivo)nodeArrayList1.get(0);

        ptipoprimitivoNode1 = new ATipoPrimitivo(tprimitivoNode2);
        }
	nodeList.add(ptipoprimitivoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ATipoMolde */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoMolde ptipomoldeNode1;
        {
            // Block
        TIdMolde tidmoldeNode2;
        tidmoldeNode2 = (TIdMolde)nodeArrayList1.get(0);

        ptipomoldeNode1 = new ATipoMolde(tidmoldeNode2);
        }
	nodeList.add(ptipomoldeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ADecObj */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBllocoFecho pbllocofechoNode1;
        {
            // Block
        PTipoMolde ptipomoldeNode2;
        TId tidNode3;
        ptipomoldeNode2 = (PTipoMolde)nodeArrayList3.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);

        pbllocofechoNode1 = new AObjetoBllocoFecho(ptipomoldeNode2, tidNode3);
        }
	nodeList.add(pbllocofechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ADecCons */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBllocoFecho pbllocofechoNode1;
        {
            // Block
        PTipoPrimitivo ptipoprimitivoNode2;
        TId tidNode3;
        ptipoprimitivoNode2 = (PTipoPrimitivo)nodeArrayList3.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);

        pbllocofechoNode1 = new AConstanteBllocoFecho(ptipoprimitivoNode2, tidNode3);
        }
	nodeList.add(pbllocofechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAchamada1Chamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PListaExp plistaexpNode3;
        {
            // Block
        }
        plistaexpNode3 = (PListaExp)nodeArrayList3.get(0);

        pexpNode1 = new AChamadaExp(listNode2, plistaexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAchamada2Chamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PListaExp plistaexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        plistaexpNode4 = (PListaExp)nodeArrayList4.get(0);

        pexpNode1 = new AChamadaExp(listNode3, plistaexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAexplistaexp1ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExp plistaexpNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        }

        plistaexpNode1 = new AExpListaExp(pexpNode2, listNode3);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAexplistaexp2ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExp plistaexpNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistaexpNode1 = new AExpListaExp(pexpNode2, listNode4);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AVazioListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListaExp plistaexpNode1;
        {
            // Block

        plistaexpNode1 = new AVazioListaExp();
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ALExpFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLExpFecho plexpfechoNode1;
        {
            // Block
        TSeparador tseparadorNode2;
        PExp pexpNode3;
        tseparadorNode2 = (TSeparador)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        plexpfechoNode1 = new ALExpFecho(tseparadorNode2, pexpNode3);
        }
	nodeList.add(plexpfechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AInstancia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PListaInit plistainitNode2;
        plistainitNode2 = (PListaInit)nodeArrayList3.get(0);

        pexpNode1 = new AInstanciaExp(plistainitNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAinitlistainit1ListaInit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaInit plistainitNode1;
        {
            // Block
        PInitObjeto pinitobjetoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pinitobjetoNode2 = (PInitObjeto)nodeArrayList1.get(0);
        {
            // Block
        }

        plistainitNode1 = new AInitListaInit(pinitobjetoNode2, listNode3);
        }
	nodeList.add(plistainitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAinitlistainit2ListaInit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaInit plistainitNode1;
        {
            // Block
        PInitObjeto pinitobjetoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pinitobjetoNode2 = (PInitObjeto)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistainitNode1 = new AInitListaInit(pinitobjetoNode2, listNode4);
        }
	nodeList.add(plistainitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AVazioListaInit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListaInit plistainitNode1;
        {
            // Block

        plistainitNode1 = new AVazioListaInit();
        }
	nodeList.add(plistainitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ALInitFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLInitFecho plinitfechoNode1;
        {
            // Block
        TSeparador tseparadorNode2;
        PInitObjeto pinitobjetoNode3;
        tseparadorNode2 = (TSeparador)nodeArrayList1.get(0);
        pinitobjetoNode3 = (PInitObjeto)nodeArrayList2.get(0);

        plinitfechoNode1 = new ALInitFecho(tseparadorNode2, pinitobjetoNode3);
        }
	nodeList.add(plinitfechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAinitobjeto1InitObjeto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitObjeto pinitobjetoNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        pexpNode4 = (PExp)nodeArrayList5.get(0);

        pinitobjetoNode1 = new AInitObjeto(tidNode2, listNode3, pexpNode4);
        }
	nodeList.add(pinitobjetoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAinitobjeto2InitObjeto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitObjeto pinitobjetoNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExp pexpNode5;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexpNode5 = (PExp)nodeArrayList6.get(0);

        pinitobjetoNode1 = new AInitObjeto(tidNode2, listNode4, pexpNode5);
        }
	nodeList.add(pinitobjetoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAfamiliafamilia1Familia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFamilia pfamiliaNode1;
        {
            // Block
        PRelacao prelacaoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        prelacaoNode2 = (PRelacao)nodeArrayList1.get(0);
        {
            // Block
        }

        pfamiliaNode1 = new AFamiliaFamilia(prelacaoNode2, listNode3);
        }
	nodeList.add(pfamiliaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAfamiliafamilia2Familia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFamilia pfamiliaNode1;
        {
            // Block
        PRelacao prelacaoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        prelacaoNode2 = (PRelacao)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfamiliaNode1 = new AFamiliaFamilia(prelacaoNode2, listNode4);
        }
	nodeList.add(pfamiliaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AVazioFamilia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFamilia pfamiliaNode1;
        {
            // Block

        pfamiliaNode1 = new AVazioFamilia();
        }
	nodeList.add(pfamiliaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AFamiliaFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFamiliaFecho pfamiliafechoNode1;
        {
            // Block
        TPontoVirgula tpontovirgulaNode2;
        PRelacao prelacaoNode3;
        tpontovirgulaNode2 = (TPontoVirgula)nodeArrayList1.get(0);
        prelacaoNode3 = (PRelacao)nodeArrayList2.get(0);

        pfamiliafechoNode1 = new AFamiliaFecho(tpontovirgulaNode2, prelacaoNode3);
        }
	nodeList.add(pfamiliafechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ARelacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelacao prelacaoNode1;
        {
            // Block
        TIdMolde tidmoldeNode2;
        TIdMolde tidmoldeNode3;
        tidmoldeNode2 = (TIdMolde)nodeArrayList2.get(0);
        tidmoldeNode3 = (TIdMolde)nodeArrayList6.get(0);

        prelacaoNode1 = new ARelacao(tidmoldeNode2, tidmoldeNode3);
        }
	nodeList.add(prelacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAfunc1decfuncao1DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        PParametros pparametrosNode4;
        PExp pexpNode5;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        pparametrosNode4 = (PParametros)nodeArrayList6.get(0);
        pexpNode5 = (PExp)nodeArrayList8.get(0);

        pdecfuncaoNode1 = new AFunc1DecFuncao(ptipoNode2, tidNode3, pparametrosNode4, pexpNode5);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAfunc1decfuncao2DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        PParametros pparametrosNode4;
        PExp pexpNode5;
        ptipoNode2 = (PTipo)nodeArrayList4.get(0);
        tidNode3 = (TId)nodeArrayList5.get(0);
        pparametrosNode4 = (PParametros)nodeArrayList7.get(0);
        pexpNode5 = (PExp)nodeArrayList9.get(0);

        pdecfuncaoNode1 = new AFunc1DecFuncao(ptipoNode2, tidNode3, pparametrosNode4, pexpNode5);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAfunc2decfuncao1DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        PParametros pparametrosNode4;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        pparametrosNode4 = (PParametros)nodeArrayList6.get(0);

        pdecfuncaoNode1 = new AFunc2DecFuncao(ptipoNode2, tidNode3, pparametrosNode4);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAfunc2decfuncao2DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        PParametros pparametrosNode4;
        ptipoNode2 = (PTipo)nodeArrayList4.get(0);
        tidNode3 = (TId)nodeArrayList5.get(0);
        pparametrosNode4 = (PParametros)nodeArrayList7.get(0);

        pdecfuncaoNode1 = new AFunc2DecFuncao(ptipoNode2, tidNode3, pparametrosNode4);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AAparametroparametros1Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        }

        pparametrosNode1 = new AParametroParametros(pparametroNode2, listNode3);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AAparametroparametros2Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparametrosNode1 = new AParametroParametros(pparametroNode2, listNode4);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AVazioParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParametros pparametrosNode1;
        {
            // Block

        pparametrosNode1 = new AVazioParametros();
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AParametroFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametroFecho pparametrofechoNode1;
        {
            // Block
        TSeparador tseparadorNode2;
        PParametro pparametroNode3;
        tseparadorNode2 = (TSeparador)nodeArrayList1.get(0);
        pparametroNode3 = (PParametro)nodeArrayList2.get(0);

        pparametrofechoNode1 = new AParametroFecho(tseparadorNode2, pparametroNode3);
        }
	nodeList.add(pparametrofechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AIdParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new AIdParametro(ptipoNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAssinaturaParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PAssinatura passinaturaNode2;
        passinaturaNode2 = (PAssinatura)nodeArrayList1.get(0);

        pparametroNode1 = new AAssinaturaParametro(passinaturaNode2);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAssinatura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssinatura passinaturaNode1;
        {
            // Block
        PParametrosAssinatura pparametrosassinaturaNode2;
        pparametrosassinaturaNode2 = (PParametrosAssinatura)nodeArrayList4.get(0);

        passinaturaNode1 = new AAssinatura(pparametrosassinaturaNode2);
        }
	nodeList.add(passinaturaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAparametrosassinatura1ParametrosAssinatura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametrosAssinatura pparametrosassinaturaNode1;
        {
            // Block
        PParametroAssinatura pparametroassinaturaNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparametroassinaturaNode2 = (PParametroAssinatura)nodeArrayList1.get(0);
        {
            // Block
        }

        pparametrosassinaturaNode1 = new AParametrosAssinatura(pparametroassinaturaNode2, listNode3);
        }
	nodeList.add(pparametrosassinaturaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAparametrosassinatura2ParametrosAssinatura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametrosAssinatura pparametrosassinaturaNode1;
        {
            // Block
        PParametroAssinatura pparametroassinaturaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparametroassinaturaNode2 = (PParametroAssinatura)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparametrosassinaturaNode1 = new AParametrosAssinatura(pparametroassinaturaNode2, listNode4);
        }
	nodeList.add(pparametrosassinaturaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AVazioParametrosAssinatura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParametrosAssinatura pparametrosassinaturaNode1;
        {
            // Block

        pparametrosassinaturaNode1 = new AVazioParametrosAssinatura();
        }
	nodeList.add(pparametrosassinaturaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AParametrosAssinaturaFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametrosAssinaturaFecho pparametrosassinaturafechoNode1;
        {
            // Block
        TSeparador tseparadorNode2;
        PParametroAssinatura pparametroassinaturaNode3;
        tseparadorNode2 = (TSeparador)nodeArrayList1.get(0);
        pparametroassinaturaNode3 = (PParametroAssinatura)nodeArrayList2.get(0);

        pparametrosassinaturafechoNode1 = new AParametrosAssinaturaFecho(tseparadorNode2, pparametroassinaturaNode3);
        }
	nodeList.add(pparametrosassinaturafechoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATipoParametroAssinatura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametroAssinatura pparametroassinaturaNode1;
        {
            // Block
        PTipo ptipoNode2;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);

        pparametroassinaturaNode1 = new ATipoParametroAssinatura(ptipoNode2);
        }
	nodeList.add(pparametroassinaturaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AAssinaturaParametroAssinatura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametroAssinatura pparametroassinaturaNode1;
        {
            // Block
        PAssinatura passinaturaNode2;
        passinaturaNode2 = (PAssinatura)nodeArrayList1.get(0);

        pparametroassinaturaNode1 = new AAssinaturaParametroAssinatura(passinaturaNode2);
        }
	nodeList.add(pparametroassinaturaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$BllocoFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PBllocoFecho pbllocofechoNode1;
        pbllocofechoNode1 = (PBllocoFecho)nodeArrayList1.get(0);
	if(pbllocofechoNode1 != null)
	{
	  listNode2.add(pbllocofechoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$BllocoFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PBllocoFecho pbllocofechoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbllocofechoNode2 = (PBllocoFecho)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbllocofechoNode2 != null)
	{
	  listNode3.add(pbllocofechoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ATerminal$IdFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PIdFecho pidfechoNode1;
        pidfechoNode1 = (PIdFecho)nodeArrayList1.get(0);
	if(pidfechoNode1 != null)
	{
	  listNode2.add(pidfechoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANonTerminal$IdFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PIdFecho pidfechoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pidfechoNode2 = (PIdFecho)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pidfechoNode2 != null)
	{
	  listNode3.add(pidfechoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ATerminal$LExpFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLExpFecho plexpfechoNode1;
        plexpfechoNode1 = (PLExpFecho)nodeArrayList1.get(0);
	if(plexpfechoNode1 != null)
	{
	  listNode2.add(plexpfechoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ANonTerminal$LExpFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLExpFecho plexpfechoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plexpfechoNode2 = (PLExpFecho)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plexpfechoNode2 != null)
	{
	  listNode3.add(plexpfechoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ATerminal$LInitFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLInitFecho plinitfechoNode1;
        plinitfechoNode1 = (PLInitFecho)nodeArrayList1.get(0);
	if(plinitfechoNode1 != null)
	{
	  listNode2.add(plinitfechoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ANonTerminal$LInitFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLInitFecho plinitfechoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plinitfechoNode2 = (PLInitFecho)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plinitfechoNode2 != null)
	{
	  listNode3.add(plinitfechoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ATerminal$FamiliaFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFamiliaFecho pfamiliafechoNode1;
        pfamiliafechoNode1 = (PFamiliaFecho)nodeArrayList1.get(0);
	if(pfamiliafechoNode1 != null)
	{
	  listNode2.add(pfamiliafechoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ANonTerminal$FamiliaFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFamiliaFecho pfamiliafechoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfamiliafechoNode2 = (PFamiliaFecho)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfamiliafechoNode2 != null)
	{
	  listNode3.add(pfamiliafechoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ATerminal$ParametroFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParametroFecho pparametrofechoNode1;
        pparametrofechoNode1 = (PParametroFecho)nodeArrayList1.get(0);
	if(pparametrofechoNode1 != null)
	{
	  listNode2.add(pparametrofechoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ANonTerminal$ParametroFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParametroFecho pparametrofechoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparametrofechoNode2 = (PParametroFecho)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparametrofechoNode2 != null)
	{
	  listNode3.add(pparametrofechoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ATerminal$ParametrosAssinaturaFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParametrosAssinaturaFecho pparametrosassinaturafechoNode1;
        pparametrosassinaturafechoNode1 = (PParametrosAssinaturaFecho)nodeArrayList1.get(0);
	if(pparametrosassinaturafechoNode1 != null)
	{
	  listNode2.add(pparametrosassinaturafechoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ANonTerminal$ParametrosAssinaturaFecho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParametrosAssinaturaFecho pparametrosassinaturafechoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparametrosassinaturafechoNode2 = (PParametrosAssinaturaFecho)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparametrosassinaturafechoNode2 != null)
	{
	  listNode3.add(pparametrosassinaturafechoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 64}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {5, SHIFT, 5}, {13, SHIFT, 6}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {36, SHIFT, 11}, {37, SHIFT, 12}, {38, SHIFT, 13}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 4}, {37, SHIFT, 32}, },
			{{-1, ERROR, 5}, {19, SHIFT, 33}, },
			{{-1, ERROR, 6}, {17, SHIFT, 34}, },
			{{-1, ERROR, 7}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 13}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 8}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {12, SHIFT, 36}, {14, SHIFT, 37}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 38}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 9}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 10}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 11}, {13, SHIFT, 49}, },
			{{-1, ERROR, 12}, {21, SHIFT, 50}, },
			{{-1, REDUCE, 29}, {18, SHIFT, 51}, {19, SHIFT, 52}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 16}, {41, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 3}, {35, SHIFT, 55}, },
			{{-1, REDUCE, 9}, {34, SHIFT, 56}, },
			{{-1, REDUCE, 10}, {29, SHIFT, 57}, },
			{{-1, REDUCE, 12}, {31, SHIFT, 58}, {32, SHIFT, 59}, },
			{{-1, REDUCE, 14}, {25, SHIFT, 60}, {26, SHIFT, 61}, },
			{{-1, REDUCE, 17}, {24, SHIFT, 62}, {27, SHIFT, 63}, {28, SHIFT, 64}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 30}, {10, SHIFT, 65}, {18, SHIFT, 66}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 32}, {5, SHIFT, 69}, },
			{{-1, ERROR, 33}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 13}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 34}, {0, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, ERROR, 35}, {20, SHIFT, 74}, },
			{{-1, ERROR, 36}, {17, SHIFT, 75}, },
			{{-1, ERROR, 37}, {17, SHIFT, 76}, },
			{{-1, REDUCE, 29}, {18, SHIFT, 51}, {19, SHIFT, 52}, {30, REDUCE, 40}, },
			{{-1, ERROR, 39}, {22, SHIFT, 78}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 42}, {30, SHIFT, 79}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 45}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {12, SHIFT, 36}, {14, SHIFT, 37}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 38}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 49}, {17, SHIFT, 82}, },
			{{-1, REDUCE, 58}, {14, SHIFT, 83}, },
			{{-1, ERROR, 51}, {38, SHIFT, 86}, },
			{{-1, REDUCE, 53}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 13}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 54}, {18, SHIFT, 51}, {19, SHIFT, 89}, },
			{{-1, ERROR, 55}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {26, SHIFT, 9}, {33, SHIFT, 10}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 56}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {26, SHIFT, 9}, {33, SHIFT, 10}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 57}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {26, SHIFT, 9}, {33, SHIFT, 10}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 58}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 59}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {26, SHIFT, 9}, {33, SHIFT, 10}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 60}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {26, SHIFT, 9}, {33, SHIFT, 10}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 61}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {26, SHIFT, 9}, {33, SHIFT, 10}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 62}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {26, SHIFT, 9}, {33, SHIFT, 10}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 63}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {26, SHIFT, 9}, {33, SHIFT, 10}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 64}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {19, SHIFT, 7}, {26, SHIFT, 9}, {33, SHIFT, 10}, {38, SHIFT, 46}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 65}, {4, SHIFT, 4}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 68}, {10, SHIFT, 65}, {18, SHIFT, 102}, },
			{{-1, ERROR, 69}, {8, SHIFT, 104}, },
			{{-1, ERROR, 70}, {20, SHIFT, 105}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 73}, {38, SHIFT, 106}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 75}, {0, SHIFT, 107}, },
			{{-1, ERROR, 76}, {37, SHIFT, 109}, },
			{{-1, REDUCE, 41}, {18, SHIFT, 51}, {19, SHIFT, 89}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 79}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 13}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 80}, {22, SHIFT, 112}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 82}, {0, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, ERROR, 83}, {18, SHIFT, 114}, },
			{{-1, ERROR, 84}, {22, SHIFT, 115}, },
			{{-1, REDUCE, 56}, {16, SHIFT, 116}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 51}, {16, SHIFT, 119}, },
			{{-1, ERROR, 88}, {20, SHIFT, 122}, },
			{{-1, REDUCE, 53}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 13}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 8}, {34, SHIFT, 56}, },
			{{-1, REDUCE, 11}, {29, SHIFT, 57}, },
			{{-1, REDUCE, 13}, {31, SHIFT, 58}, {32, SHIFT, 59}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, {25, SHIFT, 60}, {26, SHIFT, 61}, },
			{{-1, REDUCE, 18}, {24, SHIFT, 62}, {27, SHIFT, 63}, {28, SHIFT, 64}, },
			{{-1, REDUCE, 19}, {24, SHIFT, 62}, {27, SHIFT, 63}, {28, SHIFT, 64}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 104}, {9, SHIFT, 124}, },
			{{-1, ERROR, 105}, {6, SHIFT, 125}, },
			{{-1, ERROR, 106}, {19, SHIFT, 126}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 108}, {38, SHIFT, 127}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 110}, {38, SHIFT, 128}, },
			{{-1, ERROR, 111}, {10, SHIFT, 129}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 113}, {38, SHIFT, 130}, },
			{{-1, ERROR, 114}, {38, SHIFT, 131}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 116}, {14, SHIFT, 83}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 57}, {16, SHIFT, 116}, },
			{{-1, ERROR, 119}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 13}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 52}, {16, SHIFT, 119}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 123}, {20, SHIFT, 136}, },
			{{-1, ERROR, 124}, {37, SHIFT, 137}, },
			{{-1, ERROR, 125}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 13}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, REDUCE, 73}, {0, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, ERROR, 127}, {10, SHIFT, 143}, },
			{{-1, ERROR, 128}, {10, SHIFT, 144}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 130}, {19, SHIFT, 145}, },
			{{-1, ERROR, 131}, {18, SHIFT, 51}, {30, SHIFT, 146}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 138}, {7, SHIFT, 148}, },
			{{-1, ERROR, 139}, {38, SHIFT, 149}, },
			{{-1, ERROR, 140}, {20, SHIFT, 150}, },
			{{-1, REDUCE, 71}, {16, SHIFT, 151}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 73}, {0, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, ERROR, 146}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 13}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, ERROR, 147}, {18, SHIFT, 51}, {30, SHIFT, 156}, },
			{{-1, ERROR, 148}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 13}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, REDUCE, 75}, {19, SHIFT, 158}, },
			{{-1, ERROR, 150}, {10, SHIFT, 159}, {21, SHIFT, 8}, },
			{{-1, ERROR, 151}, {0, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 72}, {16, SHIFT, 151}, },
			{{-1, ERROR, 154}, {20, SHIFT, 163}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 156}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {5, SHIFT, 5}, {19, SHIFT, 7}, {21, SHIFT, 8}, {26, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {38, SHIFT, 13}, {39, SHIFT, 14}, {40, SHIFT, 15}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 80}, {0, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 163}, {10, SHIFT, 169}, {21, SHIFT, 8}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 82}, {38, SHIFT, 171}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 167}, {20, SHIFT, 172}, },
			{{-1, REDUCE, 78}, {16, SHIFT, 173}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 171}, {19, SHIFT, 158}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 173}, {0, SHIFT, 71}, {37, SHIFT, 72}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 79}, {16, SHIFT, 173}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 97}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 16}, },
			{{-1, 87}, {0, 17}, {7, 35}, {8, 39}, {33, 70}, {45, 80}, {79, 111}, {119, 134}, {125, 138}, {146, 155}, {148, 157}, {156, 164}, },
			{{-1, 18}, },
			{{-1, 19}, {55, 91}, },
			{{-1, 20}, {56, 92}, },
			{{-1, 21}, {57, 93}, },
			{{-1, 22}, {59, 95}, },
			{{-1, 23}, {60, 96}, {61, 97}, },
			{{-1, 24}, {62, 98}, {63, 99}, {64, 100}, },
			{{-1, 25}, {9, 47}, {10, 48}, {58, 94}, },
			{{-1, 26}, {150, 160}, {163, 170}, },
			{{-1, 40}, {45, 81}, },
			{{-1, 41}, },
			{{-1, 42}, },
			{{-1, 53}, {54, 90}, {77, 90}, {147, 90}, },
			{{-1, 139}, {34, 73}, {82, 113}, {158, 165}, {173, 165}, },
			{{-1, 108}, },
			{{-1, 110}, },
			{{-1, 43}, },
			{{-1, 44}, },
			{{-1, 27}, },
			{{-1, 88}, {89, 123}, },
			{{-1, 120}, {121, 135}, },
			{{-1, 28}, },
			{{-1, 84}, },
			{{-1, 117}, {118, 133}, },
			{{-1, 85}, {116, 132}, },
			{{-1, 29}, },
			{{-1, 67}, {68, 103}, },
			{{-1, 30}, {65, 101}, },
			{{-1, 31}, },
			{{-1, 140}, {145, 154}, },
			{{-1, 152}, {153, 162}, },
			{{-1, 141}, {151, 161}, },
			{{-1, 142}, {158, 166}, {173, 166}, },
			{{-1, 167}, },
			{{-1, 174}, {175, 177}, },
			{{-1, 168}, {173, 176}, },
			{{-1, 45}, },
			{{-1, 54}, {38, 77}, {131, 147}, },
			{{-1, 121}, },
			{{-1, 118}, },
			{{-1, 68}, },
			{{-1, 153}, },
			{{-1, 175}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: numero, 'verdade', 'falso', 'molde', 'se', 'funcao', '(', '[', '-', '!', '>>', id molde, id, texto, string, EOF",
			"expecting: 'senao', ';', '|', ')', ']', '*', '+', '-', '/', '%', '==', '<', '<=', 'e', 'ou', EOF",
			"expecting: id molde",
			"expecting: '('",
			"expecting: ':'",
			"expecting: numero, 'verdade', 'falso', 'se', '(', '[', '-', '!', id molde, id, texto, string",
			"expecting: numero, 'verdade', 'falso', 'se', 'constante', 'objeto', '(', '[', '-', '!', id molde, id, texto, string",
			"expecting: numero, 'verdade', 'falso', '(', id, texto, string",
			"expecting: 'funcao'",
			"expecting: '['",
			"expecting: 'senao', ';', '|', '.', '(', ')', ']', '*', '+', '-', '/', '%', '==', '<', '<=', 'e', 'ou', EOF",
			"expecting: EOF",
			"expecting: 'senao', ';', '|', ')', ']', 'ou', EOF",
			"expecting: 'senao', ';', '|', ')', ']', 'e', 'ou', EOF",
			"expecting: 'senao', ';', '|', ')', ']', '==', 'e', 'ou', EOF",
			"expecting: 'senao', ';', '|', ')', ']', '==', '<', '<=', 'e', 'ou', EOF",
			"expecting: 'senao', ';', '|', ')', ']', '+', '-', '==', '<', '<=', 'e', 'ou', EOF",
			"expecting: 'senao', ';', '|', ')', ']', EOF",
			"expecting: ';', '.'",
			"expecting: 'se'",
			"expecting: primitivo, id molde",
			"expecting: ')'",
			"expecting: '.', '(', ']', '*', '+', '-', '/', '%', '==', '=', '<', '<=', 'e', 'ou'",
			"expecting: ']'",
			"expecting: '='",
			"expecting: 'objeto', ']'",
			"expecting: id",
			"expecting: numero, 'verdade', 'falso', 'se', '(', ')', '[', '-', '!', id molde, id, texto, string",
			"expecting: '.', '(', '='",
			"expecting: '.', '('",
			"expecting: numero, 'verdade', 'falso', '(', '-', '!', id, texto, string",
			"expecting: 'molde'",
			"expecting: 'passa'",
			"expecting: '|', ')', id",
			"expecting: primitivo",
			"expecting: '.'",
			"expecting: '|', ']'",
			"expecting: '|', ')'",
			"expecting: 'por'",
			"expecting: 'entao'",
			"expecting: ';'",
			"expecting: 'objeto'",
			"expecting: primitivo, ')', id molde",
			"expecting: '.', '='",
			"expecting: 'senao'",
			"expecting: '|', '(', ')'",
			"expecting: ';', '['",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 1, 1, 11, 11, 12, 13, 14, 15, 16, 1, 1, 1, 17, 17, 17, 11, 18, 11, 19, 5, 20, 21, 4, 4, 22, 23, 6, 6, 24, 6, 6, 6, 1, 1, 1, 4, 25, 26, 27, 28, 29, 30, 30, 30, 7, 30, 30, 30, 30, 30, 30, 31, 11, 18, 18, 32, 21, 33, 33, 26, 1, 34, 2, 28, 17, 5, 23, 6, 20, 35, 23, 36, 28, 37, 21, 27, 28, 13, 14, 15, 15, 16, 1, 1, 1, 1, 1, 18, 11, 18, 38, 39, 3, 26, 26, 26, 26, 40, 17, 26, 26, 17, 41, 36, 36, 5, 37, 37, 17, 21, 2, 5, 42, 40, 40, 6, 3, 43, 36, 36, 37, 37, 17, 18, 44, 26, 21, 37, 37, 6, 6, 42, 5, 43, 5, 45, 46, 20, 37, 37, 21, 36, 5, 17, 42, 11, 11, 37, 37, 46, 36, 33, 37, 21, 37, 11, 11, 3, 37, 20, 37, 37, 37, 37, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
